{"version":3,"sources":["firebase/firebase.utils.js","appState/globalState.reducer.jsx","appState/globalState.context.jsx","users/logoutButton.component.jsx","stockname/stockName.component.jsx","stocklastupadatetime/stockLastUpadateTime.component.jsx","stockprice/stockPrice.component.jsx","stocktrendarrow/up-chevron.svg","stocktrendarrow/down-arrow.svg","stocktrendarrow/stockTrendArrow.component.jsx","stocktrendpercent/stockTrendPercent.component.jsx","localcontexts/chartVisibility.context.jsx","stockchartbutton/stockChartButton.component.jsx","localcontexts/stockHistoryVisibility.context.jsx","stockhistorybutton/stockHistoryButton.component.jsx","stockrow/stockRow.component.jsx","stockstable/stocksTable.component.jsx","stockwrapper/stockWrapper.component.jsx","charts/chart.component.jsx","chartview/chartView.component.jsx","stockhistorytable/stockHistoryTable.component.jsx","watchlist/watchList.component.jsx","homepage/homePage.component.jsx","users/loginButton.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","appState","reducer","state","action","type","value","console","log","stockNameForChartReducer","priceDataArrayForChart","priceDataArrayForChartReducer","stockHistory","stockHistoryReducer","watchListStockData","watchListStockDataReducer","stock","AppStateContext","createContext","AppStateProvider","children","stateAndDispatcher","useReducer","stockNameAndDispatcher","stockPriceDataDispatcher","stockHistoryDispatcher","watchListStockDataDispatcher","Provider","LogOutButton","className","onClick","signOut","StockName","props","stockname","toUpperCase","StockLastUpadateTime","formattedTime","StockPrice","currentStockPrice","useState","flicktheChanges","setFlickTheChanges","useEffect","setTimeout","StockTrendArrow","percentCalc","src","DownArrow","alt","UpArrow","StockTrendPercent","ChartVisibilityContext","chartVisible","Boolean","setChartVisible","StockChartButton","priceData","nameOfStock","useContext","stockNameForChart","StockHistoryVisibilityContext","stockHistoryVisible","setStockHistoryVisible","StockRow","stockDataWithTimeStampCache","stockTimeStampArray","stockDataWithTimeStamp","length","draggable","onDragStart","e","dataTransfer","setData","id","StockTable","filteredStockDataWithTimeStampArray","map","SP","CP","Object","keys","lastUpdatedUnixTime","Math","abs","Date","lastUpdated","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","toFixed","StockWrapper","searchField","setSearchField","stocksObj","fromEntries","stockObj","currentPriceTime","moment","unix","floor","_i","Number","push","splice","xtock","filter","stockName","toLowerCase","includes","placeholder","onChange","target","Chart","name","numberFormat","Intl","NumberFormat","style","currency","configPrice","yAxis","offset","labels","formatter","format","this","x","align","tooltip","shared","y","plotOptions","series","showInNavigator","gapSize","rangeSelector","selected","title","text","chart","height","credits","enabled","legend","xAxis","buttons","count","data","valueDecimals","config","ChartView","StockHistoryTable","stockHistoryObject","time","normalizedDateTime","priceOfStock","stocksInWatchList","WatchList","dropzoneClassName","setDropzoneClassName","onDragEnter","onDragLeave","onDragOver","preventDefault","onDrop","getData","removeStockButton","icon","faTrashAlt","HomePage","webSocket","useRef","dispatch","current","WebSocket","onopen","onmessage","msg","JSON","parse","onclose","close","LogInButton","App","user","setUser","onAuthStateChanged","userAuth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ce2c29d.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; // for database\nimport \"firebase/auth\"; // for authentication\n\nconst config = {\n  apiKey: \"AIzaSyCmNuF-UVMfEKdZBact1xrfVEIG4GMIKCI\",\n  authDomain: \"proximity-stocksapp.firebaseapp.com\",\n  databaseURL: \"https://proximity-stocksapp.firebaseio.com\",\n  projectId: \"proximity-stocksapp\",\n  storageBucket: \"proximity-stocksapp.appspot.com\",\n  messagingSenderId: \"149848156867\",\n  appId: \"1:149848156867:web:060d43020c505bc54ed076\",\n  measurementId: \"G-BDVRFKWMTE\",\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider(); // gives access to GoogleAuth Provider class from authentication library (auth)\nprovider.setCustomParameters({ prompt: \"select_account\" }); // we walways want to trigger google prompt whenever we use the google auth\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n","export const appState = [];\n\nexport const reducer = (state, action) => {\n  // // console.log(state);\n  switch (action.type) {\n    case \"newPrices\":\n      state = action.value;\n      return state;\n    default:\n      console.log(\"some error occurred\");\n  }\n};\n\nexport const stockNameForChart = \"\";\nexport const stockNameForChartReducer = (state, action) => {\n  state = action;\n  return state;\n};\n\nexport const priceDataArrayForChart = [];\nexport const priceDataArrayForChartReducer = (state, action) => {\n  state = action;\n  return state;\n};\n\nexport const stockHistory = [];\nexport const stockHistoryReducer = (state, action) => {\n  state = action;\n  return state;\n};\n\nexport const watchListStockData = {};\nexport const watchListStockDataReducer = (state, action) => {\n  // console.log(action);\n  const { stock } = action.value;\n  // console.log(state);\n  switch (action.type) {\n    case \"add\":\n      state[stock] = action.value;\n      break;\n    default:\n      console.log(\"some error occurred\");\n  }\n  return state;\n};\n","import React, { createContext, useReducer } from \"react\";\nimport {\n  reducer,\n  appState,\n  stockNameForChart,\n  priceDataArrayForChart,\n  stockNameForChartReducer,\n  priceDataArrayForChartReducer,\n  stockHistoryReducer,\n  stockHistory,\n  watchListStockData,\n  watchListStockDataReducer,\n} from \"./globalState.reducer\";\n\nexport const AppStateContext = createContext();\n\nexport const AppStateProvider = ({ children }) => {\n  const stateAndDispatcher = useReducer(reducer, appState);\n  const stockNameAndDispatcher = useReducer(\n    stockNameForChartReducer,\n    stockNameForChart\n  );\n  const stockPriceDataDispatcher = useReducer(\n    priceDataArrayForChartReducer,\n    priceDataArrayForChart\n  );\n  const stockHistoryDispatcher = useReducer(stockHistoryReducer, stockHistory);\n  const watchListStockDataDispatcher = useReducer(\n    watchListStockDataReducer,\n    watchListStockData\n  );\n  return (\n    <AppStateContext.Provider\n      value={{\n        stateAndDispatcher,\n        stockNameAndDispatcher,\n        stockPriceDataDispatcher,\n        stockHistoryDispatcher,\n        watchListStockDataDispatcher,\n      }}\n    >\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { auth } from \"../firebase/firebase.utils\";\nimport \"./logoutButton.style.css\";\n\nconst LogOutButton = () => {\n  return (\n    <div className=\"sign-out-btn-container\">\n      <button\n        type=\"button\"\n        className=\"sign-out-btn\"\n        onClick={() => auth.signOut()}\n      >\n        SignOut\n      </button>\n    </div>\n  );\n};\n\nexport default LogOutButton;\n","import React from \"react\";\n\nconst StockName = (props) => {\n  const { stockname } = props;\n  return <td className=\"stock-name\">{stockname.toUpperCase()}</td>;\n};\n\nexport default StockName;\n","import React from \"react\";\n\nconst StockLastUpadateTime = (props) => {\n  const { formattedTime } = props;\n  return (\n    <td>\n      {formattedTime}\n    </td>\n  );\n};\n\nexport default StockLastUpadateTime;\n","import React, { useState, useEffect } from \"react\";\n// import { AppStateContext } from \"../appState/globalState.context\"\n\n\nconst StockPrice = (props) => {\n  const { currentStockPrice } = props;\n//   const { watchListStockDataDispatcher } = useContext(AppStateContext)\n//   const [watchListStockData, watchListStockDataReducer] = watchListStockDataDispatcher\n//   // console.log(watchListStockData);\n\n  const [flicktheChanges, setFlickTheChanges] = useState(false);\n//   watchListStockDataReducer({type: 'update', value: currentStockPrice})\n  useEffect(() => {\n    setFlickTheChanges(true);\n    setTimeout(() => {\n      setFlickTheChanges(false);\n    }, 2000);\n  }, [currentStockPrice]);\n  return (\n    <td className={flicktheChanges ? \"flickClass \" : \"\"}>\n      ${currentStockPrice} USD\n    </td>\n  );\n};\n\nexport default StockPrice;\n","export default __webpack_public_path__ + \"static/media/up-chevron.5f5a3fcb.svg\";","export default __webpack_public_path__ + \"static/media/down-arrow.676521e0.svg\";","import React from \"react\";\nimport UpArrow from \"./up-chevron.svg\";\nimport DownArrow from \"./down-arrow.svg\";\n\nconst StockTrendArrow = (props) => {\n  const { percentCalc } = props;\n  return (\n    <td>\n      {percentCalc < 0 ? (\n        <img src={DownArrow} alt=\"down arrow\" />\n      ) : (\n        <img src={UpArrow} alt=\"up arrow\" />\n      )}\n    </td>\n  );\n};\n\nexport default StockTrendArrow;\n","import React from \"react\";\n\nconst StockTrendPercent = (props) => {\n  const { percentCalc } = props;\n  return (\n    <td\n      className={\n        percentCalc > 0\n          ? \"green-color\"\n          : percentCalc < 0\n          ? \"red-color\"\n          : \"white-color\"\n      }\n    >\n      <b>{percentCalc}%</b>\n    </td>\n  );\n};\n\nexport default StockTrendPercent;\n","import { createContext } from 'react'\n\nconst ChartVisibilityContext = createContext({\n    chartVisible: Boolean,\n    setChartVisible: () => {}\n  })\n\nexport default ChartVisibilityContext","import React, { useContext } from \"react\";\nimport ChartVisibilityContext from \"../localcontexts/chartVisibility.context\";\nimport { AppStateContext } from \"../appState/globalState.context\";\n\nconst StockChartButton = (props) => {\n  const { priceData, nameOfStock } = props;\n  const { setChartVisible, chartVisible } = useContext(ChartVisibilityContext);\n  const { stockNameAndDispatcher, stockPriceDataDispatcher } = useContext(\n    AppStateContext\n  );\n  const [stockNameForChart, stockNameForChartReducer] = stockNameAndDispatcher;\n  const [\n    priceDataArrayForChart,\n    priceDataArrayForChartReducer,\n  ] = stockPriceDataDispatcher;\n// console.log(chartVisible);\n  console.log(stockNameForChart, priceDataArrayForChart);\n  const showStockChart = () => {\n    setChartVisible(!chartVisible);\n    stockNameForChartReducer(nameOfStock);\n    priceDataArrayForChartReducer(priceData);\n  };\n  // console.log(chartVisible);\n  return (\n    <td>\n      <button onClick={() => showStockChart()}>See Chart</button>\n    </td>\n  );\n};\n\nexport default StockChartButton;\n","import { createContext } from 'react'\n\nconst StockHistoryVisibilityContext = createContext({\n    stockHistoryVisible: Boolean,\n    setStockHistoryVisible: () => {}\n  })\n\nexport default StockHistoryVisibilityContext","import React, { useContext } from \"react\";\nimport StockHistoryVisibilityContext from \"../localcontexts/stockHistoryVisibility.context\";\nimport { AppStateContext } from \"../appState/globalState.context\";\n\nconst StockChartButton = (props) => {\n  const { priceData } = props;\n  const { setStockHistoryVisible, stockHistoryVisible } = useContext(StockHistoryVisibilityContext);\n  const { stockHistoryDispatcher } = useContext(\n    AppStateContext\n  );\n  // console.log(stockHistoryVisible);\n  const [stockHistory, stockHistoryReducer] = stockHistoryDispatcher;\n\n  console.log(stockHistory);\n  const showStockHistory = () => {\n    setStockHistoryVisible(!stockHistoryVisible);\n    stockHistoryReducer(priceData);\n  };\n  // console.log(stockHistoryVisible);\n  \n  return (\n    <td>\n      <button onClick={() => showStockHistory()}>Stock History</button>\n    </td>\n  );\n};\n\nexport default StockChartButton;\n","import React, { Fragment, useContext } from \"react\";\nimport StockName from \"../stockname/stockName.component\";\nimport StockLastUpadateTime from \"../stocklastupadatetime/stockLastUpadateTime.component\";\nimport StockPrice from \"../stockprice/stockPrice.component\";\nimport StockTrendArrow from \"../stocktrendarrow/stockTrendArrow.component\";\nimport StockTrendPercent from \"../stocktrendpercent/stockTrendPercent.component\";\nimport StockChartButton from \"../stockchartbutton/stockChartButton.component\";\nimport StockHistoryButton from \"../stockhistorybutton/stockHistoryButton.component\";\nimport { AppStateContext } from \"../appState/globalState.context\";\nimport \"./stockRow.style.css\";\n\nconst StockRow = (props) => {\n  const { watchListStockDataDispatcher } = useContext(AppStateContext);\n  const [\n    watchListStockData,\n    watchListStockDataReducer,\n  ] = watchListStockDataDispatcher;\n  console.log(watchListStockData);\n  const {\n    // appState,\n    stock,\n    percentCalc,\n    formattedTime,\n    stockDataWithTimeStampCache,\n    stockTimeStampArray,\n    stockDataWithTimeStamp,\n  } = props;\n\n  const onDragStart = (e, stock) => {\n    e.dataTransfer.setData(\"text/plain\", stock);\n\n    //   watchListStockDataReducer({type: 'add', value: watchListDataObject})\n  };\n\n  const currentStockPrice =\n    stockDataWithTimeStampCache[stock][\n      stockTimeStampArray[stockTimeStampArray.length - 1]\n    ];\n\n  const watchListDataObject = {\n    stock,\n    percentCalc,\n    formattedTime,\n    currentStockPrice,\n  };\n  watchListStockDataReducer({ type: \"add\", value: watchListDataObject });\n\n  //   const [chartVisible, setChartVisible] = useState(false);\n  return (\n    <Fragment key={stock}>\n      \n      <div draggable onDragStart={(e) => onDragStart(e, stock)}>\n        {/* <table> */}\n          {/* <tbody> */}\n            <tr id={stock} className='stock-table-row'>\n              <span className=\"stock-StockName\">\n                <StockName stockname={stock} />\n              </span>\n              <span className=\"stock-StockLastUpadateTime\">\n                <StockLastUpadateTime formattedTime={formattedTime} />\n              </span>\n              <span className=\"stock-StockPrice\">\n                <StockPrice currentStockPrice={currentStockPrice} />\n              </span>\n              <span className=\"stock-StockTrendArrow\">\n                <StockTrendArrow percentCalc={percentCalc} />\n              </span>\n\n              <span className=\"stock-StockTrendPercent\">\n                <StockTrendPercent percentCalc={percentCalc} />\n              </span>\n\n              <span className=\"stock-buttons\">\n                <StockChartButton\n                  priceData={stockDataWithTimeStamp[stock]}\n                  nameOfStock={stock}\n                />\n                <StockHistoryButton\n                  priceData={stockDataWithTimeStamp[stock]}\n                  nameOfStock={stock}\n                />\n              </span>\n            </tr>\n          {/* </tbody> */}\n        {/* </table> */}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default StockRow;\n","import React from \"react\";\n// import ChartView from \"../chartview/chartView.component\";\n// import UpArrow from \"../stockwrapper/up-chevron.svg\";\n// import DownArrow from \"../stockwrapper/up-chevron.svg\";\nimport \"../stockwrapper/stockWrapper.style.scss\";\nimport StockRow from \"../stockrow/stockRow.component\";\nimport \"./stockTable.style.css\";\n// import { AppStateContext } from \"../appState/globalState.context\";\n\nconst StockTable = (props) => {\n  const {\n    filteredStockDataWithTimeStampArray,\n    stockDataWithTimeStampCache,\n    appState,\n    stockDataWithTimeStamp,\n  } = props;\n\n  // const { watchListStockDataDispatcher } = useContext(AppStateContext)\n  // const [watchListStockData, watchListStockDataReducer] = watchListStockDataDispatcher\n  // // console.log(watchListStockData);\n  //   const [flicktheChanges, setFlickTheChanges] = useState(false);\n  //   const [chartVisible, setChartVisible] = useState(false);\n\n  //   useEffect(() => {\n  //     setFlickTheChanges(true);\n  //     setTimeout(() => {\n  //       setFlickTheChanges(false);\n  //     }, 2000);\n  //   }, [appState]);\n  const gainLossPercent = (SP, CP) => {\n    let percentCalc;\n    if (SP && CP) {\n      percentCalc = (((SP - CP) / CP) * 100).toFixed(2);\n    } else {\n      percentCalc = 0;\n    }\n    return {\n      percentCalc,\n    };\n  };\n  return (\n    <div className=\"stock-wrapper\">\n      <table className=\"label-table-row\">\n        <tbody>\n          <tr>\n            <td>Stock Name</td>\n            <td>Last Update Time</td>\n            <td>Current Price</td>\n            <td>Percent Profit/Loss</td>\n            <td>Options</td>\n          </tr>\n        </tbody>\n      </table>\n      <div className=\"stocks-table\">\n      <table>\n        <tbody>\n          {filteredStockDataWithTimeStampArray.length ? (\n            filteredStockDataWithTimeStampArray.map((stock) => {\n              const stockTimeStampArray = Object.keys(\n                stockDataWithTimeStampCache[stock]\n              );\n              const lastUpdatedUnixTime = Math.abs(\n                new Date(\n                  stockTimeStampArray[stockTimeStampArray.length - 1] * 1000\n                ) -\n                  new Date(\n                    stockTimeStampArray[stockTimeStampArray.length - 2] * 1000\n                  )\n              );\n              const lastUpdated = new Date(lastUpdatedUnixTime * 1000);\n\n              const hours = lastUpdated.getHours();\n              const minutes = \"0\" + lastUpdated.getMinutes();\n              const seconds = \"0\" + lastUpdated.getSeconds();\n              const formattedTime =\n                hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\n\n              const { percentCalc } = gainLossPercent(\n                stockDataWithTimeStampCache[stock][\n                  stockTimeStampArray[stockTimeStampArray.length - 1]\n                ],\n                stockDataWithTimeStampCache[stock][\n                  stockTimeStampArray[stockTimeStampArray.length - 2]\n                ]\n              );\n\n              return (\n                <StockRow\n                  appState={appState}\n                  formattedTime={formattedTime}\n                  percentCalc={percentCalc}\n                  stock={stock}\n                  stockDataWithTimeStampCache={stockDataWithTimeStampCache}\n                  stockTimeStampArray={stockTimeStampArray}\n                  stockDataWithTimeStamp={stockDataWithTimeStamp}\n                />\n              );\n            })\n          ) : (\n            <tr key={\"random 1\"}>\n              <td>Please wait while stocks load.</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      </div>\n    </div>\n  );\n};\n\nexport default StockTable;\n","import React, { useState, useContext } from \"react\";\nimport \"./stockWrapper.style.scss\";\n\nimport moment from \"moment\";\nimport StockTable from \"../stockstable/stocksTable.component\";\n// import ChartView from \"../chartview/chartView.component\"\nimport { AppStateContext } from \"../appState/globalState.context\";\n\nconst stockDataWithTimeStamp = {};\nlet stockDataWithTimeStampCache = {};\n\nconst StockWrapper = () => {\n  const { stateAndDispatcher } = useContext(AppStateContext);\n  const [appState] = stateAndDispatcher;\n\n  // const [flicktheChanges, setFlickTheChanges] = useState(false);\n  const [searchField, setSearchField] = useState(\"\");\n\n  const stocksObj = Object.fromEntries(appState);\n\n  for (const stockObj in stocksObj) {\n    // moment.unix(Math.floor(new Date() / 1000))._i\n    const currentPriceTime = [\n      moment.unix(Math.floor(new Date() / 1000))._i,\n      Number(stocksObj[stockObj].toFixed(2)),\n    ];\n    if (stockObj in stockDataWithTimeStamp) {\n      stockDataWithTimeStamp[stockObj].push(currentPriceTime);\n      // cleaner----\n      if (stockDataWithTimeStamp[stockObj].length >= 100) {\n        stockDataWithTimeStamp[stockObj].splice(0, 50);\n      }\n    } else {\n      stockDataWithTimeStamp[stockObj] = [currentPriceTime];\n    }\n  }\n\n  for (const xtock in stockDataWithTimeStamp) {\n    stockDataWithTimeStampCache[xtock] = Object.fromEntries(\n      stockDataWithTimeStamp[xtock]\n    );\n  }\n\n  const onSearchChange = (e) => {\n    setSearchField(e.target.value);\n  };\n  const stockDataWithTimeStampArray = Object.keys(stockDataWithTimeStampCache);\n  const filteredStockDataWithTimeStampArray = stockDataWithTimeStampArray.filter(\n    (stockName) => stockName.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <>\n      <div className=\"stocks-wrapper\">\n        <h5>Stocks</h5>\n        <div className='search-container'>\n          <input placeholder=\"Search stocks here\" onChange={onSearchChange} />\n        </div>\n        <StockTable\n          filteredStockDataWithTimeStampArray={\n            filteredStockDataWithTimeStampArray\n          }\n          stockDataWithTimeStampCache={stockDataWithTimeStampCache}\n          appState={appState}\n          stockDataWithTimeStamp={stockDataWithTimeStamp}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default StockWrapper;\n\n// EVI\n// GOOG\n// LNKD\n// MSFT\n// AAPL\n// SHLD\n// TCK\n// EBR\n// EVA\n// YHOO\n// INTC\n// MU\n// AKS\n","/* eslint-disable no-dupe-keys */\nimport React from 'react'\nimport ReactHighcharts from 'react-highcharts'\nimport moment from 'moment'\n\nconst Chart = (props) => {\n  const { priceData, name } = props\n    const options = {style: 'currency', currency: 'USD'};\n    const numberFormat = new Intl.NumberFormat('en-US', options);\n    const configPrice = {\n      \n      yAxis: [{\n        offset: 20,\n\n        labels: {\n          formatter: function () {\n            return numberFormat.format(this.value) \n          }\n          ,\n          x: -15,\n          style: {\n            \"color\": \"#000\", \"position\": \"absolute\"\n\n          },\n          align: 'left'\n        },\n      },\n        \n      ],\n      tooltip: {\n        shared: true,\n        formatter: function () {\n          return numberFormat.format(this.y, 0) +  '</b><br/>' + moment(this.x).format('MMMM Do YYYY, h:mm')\n        }\n      },\n      plotOptions: {\n        series: {\n          showInNavigator: true,\n          gapSize: 6,\n\n        }\n      },\n      \n      rangeSelector: {\n        selected: 1\n      },\n      title: {\n        text: `${name.toUpperCase()} Changes`\n      },\n      chart: {\n        height: 600,\n      },\n  \n      credits: {\n        enabled: false\n      },\n  \n      legend: {\n        enabled: true\n      },\n      xAxis: {\n        type: 'date',\n      },\n      rangeSelector: {\n        buttons: [{\n          type: 'day',\n          count: 1,\n          text: '1d',\n        }, {\n          type: 'day',\n          count: 7,\n          text: '7d'\n        }, {\n          type: 'month',\n          count: 1,\n          text: '1m'\n        }, {\n          type: 'month',\n          count: 3,\n          text: '3m'\n        },\n          {\n          type: 'all',\n          text: 'All'\n        }],\n        selected: 4\n      },\n      series: [{\n        name: 'Price',\n        type: 'spline',\n  \n        data: priceData,\n        tooltip: {\n          valueDecimals: 2\n        },\n  \n      }\n      ]\n    };\n    return (\n      <div className='chart-container'>\n         <ReactHighcharts config = {configPrice}></ReactHighcharts>\n      </div>\n    )\n}\n\nexport default Chart;\n","import React, { useContext } from \"react\";\nimport Chart from \"../charts/chart.component\";\n// import ChartVisibilityContext from \"../chartvisibilitycontext/chartVisibility.context\"\nimport { AppStateContext } from \"../appState/globalState.context\";\nconst ChartView = () => {\n//   const { stockname, stockpricedata } = useContext(ChartVisibilityContext);\n  const { stockNameAndDispatcher, stockPriceDataDispatcher } = useContext(AppStateContext);\n  const [ stockNameForChart ] = stockNameAndDispatcher;\n  const [ priceDataArrayForChart ] = stockPriceDataDispatcher;\n//   // console.log(stockname, stockpricedata);\n  return (\n    <div className=\"chartview-main\">\n      <Chart name={stockNameForChart} priceData={priceDataArrayForChart} />\n    </div>\n  );\n};\n\nexport default ChartView;\n","import React, { useContext } from \"react\";\nimport { AppStateContext } from \"../appState/globalState.context\";\nimport \"./stockHistoryTable.style.scss\";\n\nconst StockHistoryTable = () => {\n  const { stockHistoryDispatcher } = useContext(AppStateContext);\n  const [stockHistory] = stockHistoryDispatcher;\n  const stockHistoryObject = Object.fromEntries(stockHistory);\n  // console.log(stockHistory);\n  return (\n    <div className=\"stocks-history-wrapper\">\n      <table className=\"history-table\">\n        <tbody>\n          {Object.keys(stockHistoryObject).map((time) => {\n            const normalizedDateTime = new Date(Number(time) * 1000);\n            // const date = normalizedDateTime.getDate()\n            const hours = normalizedDateTime.getHours();\n            const minutes = \"0\" + normalizedDateTime.getMinutes();\n            const seconds = \"0\" + normalizedDateTime.getSeconds();\n            const formattedTime =\n              hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\n            const priceOfStock = `$${stockHistoryObject[time]}`;\n            // // console.log(date);\n            return (\n              <>\n              <div></div>\n              <tr><td>Time</td><td>Price</td></tr>\n              <tr className=\"history-table-row\">\n                  {/* <td className=\"history-table-row-element\">{date}</td> */}\n                <td className=\"history-table-row-element\">{formattedTime}</td>\n                <td className=\"history-table-row-element\">{priceOfStock}</td>\n              </tr>\n              </>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default StockHistoryTable;\n","import React, { useState, useContext } from \"react\";\nimport { AppStateContext } from \"../appState/globalState.context\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport \"./watchList.style.scss\";\n\nconst stocksInWatchList = {};\n// let stockName, formattedTime, currentStockPrice, percentCalc\nconst WatchList = () => {\n  const [dropzoneClassName, setDropzoneClassName] = useState(\n    \"watch-stocks-container\"\n  );\n  const { watchListStockDataDispatcher } = useContext(AppStateContext);\n  const [watchListStockData] = watchListStockDataDispatcher;\n\n  // const { formattedTime, percentCalc, currentStockPrice } = watchListStockData;\n  // console.log(formattedTime, currentStockPrice, percentCalc);\n\n  const onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const onDrop = (e) => {\n    const stockName = e.dataTransfer.getData(\"text\");\n    stocksInWatchList[stockName] = 1;\n    setDropzoneClassName(\"watch-stocks-container\");\n    // console.log(stocksInWatchList);\n  };\n\n  const onDragEnter = () => {\n    setDropzoneClassName(\"dropzone-hovered\");\n  };\n\n  const removeStockButton = (stock) => {\n    delete stocksInWatchList[stock]\n  }\n  // console.log(stocksInWatchList);\n  return (\n    <div\n      className=\"watchlist-container\"\n      onDragEnter={() => onDragEnter()}\n      onDragLeave={() => setDropzoneClassName(\"watch-stocks-container\")}\n    >\n      <div>Watch List</div>\n      <div\n        className={dropzoneClassName}\n        onDragOver={(e) => onDragOver(e)}\n        onDrop={(e) => onDrop(e)}\n        \n      >\n        DROPZONE\n        {Object.keys(stocksInWatchList).map((stock) => {\n          const { formattedTime, percentCalc, currentStockPrice } = watchListStockData[stock];\n          return (\n            <div className=\"stock-row\">\n              <table>\n                <tbody>\n                  <tr className=\"stock-table-row\">\n                    <td>{stock.toUpperCase()}</td>\n                    <td>{formattedTime}</td>\n                    <td>${currentStockPrice}USD</td>\n                    <td\n                      className={\n                        percentCalc > 0\n                          ? \"green-color\"\n                          : percentCalc < 0\n                          ? \"red-color\"\n                          : \"white-color\"\n                      }\n                    >\n                      {percentCalc}%\n                    </td>\n                    <td>\n                    <FontAwesomeIcon\n                className='arrow'\n                onClick={() => removeStockButton(stock)}\n                icon={faTrashAlt}\n            /></td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default WatchList;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useRef, useContext, useState } from \"react\";\nimport { AppStateContext } from \"../appState/globalState.context\";\nimport LogOutButton from \"../users/logoutButton.component\";\nimport StockWrapper from \"../stockwrapper/stockWrapper.component\";\nimport ChartView from \"../chartview/chartView.component\";\nimport StockHistoryTable from \"../stockhistorytable/stockHistoryTable.component\"\nimport WatchList from \"../watchlist/watchList.component\"\nimport ChartVisibilityContext from \"../localcontexts/chartVisibility.context\"\nimport StockHistoryVisibilityContext from \"../localcontexts/stockHistoryVisibility.context\"\nimport \"./homePage.style.css\";\n\nconst HomePage = () => {\n  const webSocket = useRef(null);\n  const { stateAndDispatcher } = useContext(AppStateContext);\n  const [appState, dispatch] = stateAndDispatcher;\n  \n\n  // // console.log(`appState: ${appState}`);\n  let updateState = [...appState];\n  const [chartVisible, setChartVisible] = useState(false)\n  const [stockHistoryVisible, setStockHistoryVisible] = useState(false)\n\n  useEffect(() => {\n    webSocket.current = new WebSocket(`ws://stocks.mnet.website`);\n    webSocket.current.onopen = () => {\n      console.log(\"connection opened\");\n    };\n    webSocket.current.onmessage = (msg) => {\n      const data = JSON.parse(msg.data);\n      updateState = data;\n      dispatch({ type: \"newPrices\", value: updateState });\n    };\n    webSocket.current.onclose = () => {\n      webSocket.current.close();\n    };\n    return () => webSocket.current.close();\n  }, []);\n\n  return (\n    <div>\n      <LogOutButton />\n      <div className=\"main\">\n        <StockHistoryVisibilityContext.Provider value={{\n          stockHistoryVisible,\n          setStockHistoryVisible\n        }}>\n          <div className='watchlist-history-container'>\n          <WatchList/>\n        {stockHistoryVisible && <StockHistoryTable/>}\n          </div>\n        \n        <ChartVisibilityContext.Provider value={{\n          chartVisible,\n          setChartVisible\n        }}>\n          <div className='stockTable-container'>\n          <StockWrapper />\n          </div>\n          \n        \n        <div className='chartview-container'>\n        {chartVisible && <ChartView />}\n        </div>\n        </ChartVisibilityContext.Provider>\n        </StockHistoryVisibilityContext.Provider>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { signInWithGoogle } from \"../firebase/firebase.utils\";\nimport \"./loginButton.style.css\";\n\nconst LogInButton = () => {\n  return (\n    <div className=\"sign-in-btn-container\">\n      <button type=\"button\" className=\"sign-in-btn\" onClick={signInWithGoogle}>\n        Sign In With Google\n      </button>\n    </div>\n  );\n};\n\nexport default LogInButton;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { auth } from \"./firebase/firebase.utils\";\nimport HomePage from \"./homepage/homePage.component\";\nimport LogInButton from \"./users/loginButton.component\";\nimport { AppStateProvider } from \"./appState/globalState.context\";\n\nfunction App() {\n  const [user, setUser] = useState(\"\");\n\n  useEffect(() => {\n    auth.onAuthStateChanged((userAuth) => {\n      setUser(userAuth);\n      // // console.log(userAuth);\n    });\n  }, [user]);\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <AppStateProvider>\n          <HomePage />\n        </AppStateProvider>\n      ) : (\n        <LogInButton />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(// console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}